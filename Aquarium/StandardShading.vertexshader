#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;
layout(location = 2) in vec4 BubblePosAndSize_modelspace;
layout(location = 3) in vec4 BubbleColAndLight;

// Output data ; will be interpolated for each fragment.

out vec3 Position_worldspace;
out vec3 Normal_cameraspace;
out vec3 EyeDirection_cameraspace;
out vec4 BubbleCol;
out float BubbleLightPower[15];

//////////////////////////////////////// Sun Light

out vec3 LightDirection_cameraspace;

//////////////////////////////////////// Player Light

out vec3 PlayerLightDir_cameraspace;

//////////////////////////////////////// Bubbles Lights

out vec3 BubblesLightDir_cameraspace[15];


uniform int isInstanced;
///////////////////////////////////////////////////
// Values that stay constant for the whole mesh.
uniform mat4 P;
uniform mat4 V;
uniform mat4 M;

/////////////////////////////////////// Sun Light

uniform vec3 LightPosition_worldspace;

/////////////////////////////////////// Player Light

uniform vec3 PlayerLightPos_worldspace;

/////////////////////////////////////// Bubbles Lights

uniform int NumberOfLight;
uniform vec3 BubblesLightColor[15];
uniform vec3 BubblesLightPos_worldspace[15];

////////////////////////////////////////////////
void main(){
    if(isInstanced == 0) //Normal drawing
    {
        // Output position of the vertex, in clip space : MVP * position
        mat4 MVP = P*V*M;
        gl_Position =  MVP * vec4(vertexPosition_modelspace,1);

        // Position of the vertex, in worldspace : M * position
        Position_worldspace = (M * vec4(vertexPosition_modelspace,1)).xyz;

        // Vector that goes from the vertex to the camera, in camera space.
        // In camera space, the camera is at the origin (0,0,0).
        vec3 vertexPosition_cameraspace = ( V * M * vec4(vertexPosition_modelspace,1)).xyz;
        EyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;

        // Vector that goes from the vertex to the light, in camera space. M is ommited because it's identity.

        /////////////////////////////////////////////////////////////////////////////////////// Sun Light

        vec3 LightPosition_cameraspace = ( V * vec4(LightPosition_worldspace,1)).xyz;
        LightDirection_cameraspace = LightPosition_cameraspace + EyeDirection_cameraspace;

        /////////////////////////////////////////////////////////////////////////////////////// Player Light

        vec3 PlayerLightPos_cameraspace = ( V * vec4(PlayerLightPos_worldspace,1)).xyz;
        PlayerLightDir_cameraspace = PlayerLightPos_cameraspace + EyeDirection_cameraspace;

        /////////////////////////////////////////////////////////////////////////////////////// Bubble Lights
        vec3 BubbleLightPos_cameraspace;
        for(int i = 0; i < NumberOfLight; i++)
        {
            BubbleLightPos_cameraspace = ( V * vec4(BubblesLightPos_worldspace[i],1)).xyz;
            BubblesLightDir_cameraspace[i] = BubbleLightPos_cameraspace + EyeDirection_cameraspace;
        }
        //////////////////////////////////////////////////////////////////////////////////

        // Normal of the the vertex, in camera space
        Normal_cameraspace = ( mat3(V) * mat3(transpose(inverse(M))) * vertexNormal_modelspace).xyz; // Only correct if ModelMatrix does not scale the model ! Use its inverse transpose if not.
    }
    else // Instancing
    {

        mat4 VP = P*V;

        // Position of the vertex, in worldspace : Minst * position
        Position_worldspace = vec3(BubblePosAndSize_modelspace) + BubblePosAndSize_modelspace[3]*vertexPosition_modelspace;
        gl_Position = vec4(Position_worldspace, 1);
        gl_Position = VP*gl_Position;
        //gl_Position = VP * vec4(vertexPosition_modelspace,1);



        // Vector that goes from the vertex to the camera, in camera space.
        // In camera space, the camera is at the origin (0,0,0).
        vec3 vertexPosition_cameraspace = ( V * vec4(Position_worldspace,1)).xyz;
        EyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;

        // Vector that goes from the vertex to the light, in camera space. M is ommited because it's identity.

        /////////////////////////////////////////////////////////////////////////////////////// Sun Light

        vec3 LightPosition_cameraspace = ( V * vec4(LightPosition_worldspace,1)).xyz;
        LightDirection_cameraspace = LightPosition_cameraspace + EyeDirection_cameraspace;

        /////////////////////////////////////////////////////////////////////////////////////// Player Light

        vec3 PlayerLightPos_cameraspace = ( V * vec4(PlayerLightPos_worldspace,1)).xyz;
        PlayerLightDir_cameraspace = PlayerLightPos_cameraspace + EyeDirection_cameraspace;

        /////////////////////////////////////////////////////////////////////////////////////// Bubble Lights
        vec3 BubbleLightPos_cameraspace;
        for(int i = 0; i < NumberOfLight; i++)
        {
            BubbleLightPos_cameraspace = ( V * vec4(BubblesLightPos_worldspace[i],1)).xyz;
            BubblesLightDir_cameraspace[i] = BubbleLightPos_cameraspace + EyeDirection_cameraspace;
            BubbleLightPower[i] = BubblePosAndSize_modelspace[3];
        }
        //////////////////////////////////////////////////////////////////////////////////

        // Normal of the the vertex, in camera space

        Normal_cameraspace = ( V * vec4(BubblePosAndSize_modelspace[3]*vertexPosition_modelspace,0)).xyz; // Only correct if ModelMatrix does not scale the model ! Use its inverse transpose if not.
        BubbleCol = vec4(BubbleColAndLight[0], BubbleColAndLight[1], BubbleColAndLight[2], BubbleColAndLight[3]);
        if(BubbleColAndLight[3] == 1) Normal_cameraspace = -Normal_cameraspace;
    }



}

